multfac:

    
           
    li      $s3, 0        # lw product
    li      $s4, 0        # hw product

    beq $a1, $0, exit   
    beq $a0, $0, exit

    move    $s2, $0        # extend multiplicand to 64 bits
    
    li		$t4, 1		# $t4 = 33
    li		$t5, 33		# $t5 = 33
    

    j		multopr				# jump to multopr and save position to $ra
    
    

multopr:

    andi $t0, $a0, 1     
    beq $t0, $0, eqlzero   
    addu $s3, $s3, $a1  
    sltu $t0, $s3, $a1  
    addu $s4, $s4, $t0  
    addu $s4, $s4, $s2  

eqlzero:

    srl $t0, $a1, 31    
    sll $a1, $a1, 1
    sll $s2, $s2, 1
    addu $s2, $s2, $t0

    srl $a0, $a0, 1     

    addi	$t4, $t4, 1			# $t4 = $t4 + 1
    
    beq $t4, $t5, exit
    bne $t4, $t5, multopr
    

exit:

    mtlo $s3
    mthi $s4

    j		end				# jump to end
    
    
end:
    jr		$ra					# jump to $ra